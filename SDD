#include <stdio.h>
#include <stdlib.h>

// Definição da estrutura do nó
struct TreeNode {
    int key;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Função para criar um novo nó
struct TreeNode* createNode(int key) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->key = key;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Função para inserir um valor na ABB
struct TreeNode* insert(struct TreeNode* root, int key) {
    if (root == NULL) {
        return createNode(key);
    }

    if (key < root->key) {
        root->left = insert(root->left, key);
    } else if (key > root->key) {
        root->right = insert(root->right, key);
    }

    return root;
}

// Função para encontrar o nó com o valor mínimo
struct TreeNode* findMin(struct TreeNode* node) {
    while (node->left != NULL) {
        node = node->left;
    }
    return node;
}

// Função para remover um valor da ABB
struct TreeNode* deleteNode(struct TreeNode* root, int key) {
    if (root == NULL) {
        return root;
    }

    if (key < root->key) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->key) {
        root->right = deleteNode(root->right, key);
    } else {
        if (root->left == NULL) {
            struct TreeNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct TreeNode* temp = root->left;
            free(root);
            return temp;
        }

        struct TreeNode* temp = findMin(root->right);
        root->key = temp->key;
        root->right = deleteNode(root->right, temp->key);
    }

    return root;
}

// Função para buscar um valor na ABB
int search(struct TreeNode* root, int key) {
    if (root == NULL) {
        return 0; // Valor não encontrado
    }

    if (key == root->key) {
        return 1; // Valor encontrado
    } else if (key < root->key) {
        return search(root->left, key);
    } else {
        return search(root->right, key);
    }
}

// Funções para percorrer a árvore em ordem, pré-ordem e pós-ordem
void inorder(struct TreeNode* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

void preorder(struct TreeNode* root) {
    if (root != NULL) {
        printf("%d ", root->key);
        preorder(root->left);
        preorder(root->right);
    }
}

void postorder(struct TreeNode* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->key);
    }
}

// Funções para encontrar o valor mínimo e máximo na ABB
int findMinValue(struct TreeNode* root) {
    if (root == NULL) {
        return -1; // Árvore vazia
    }

    while (root->left != NULL) {
        root = root->left;
    }

    return root->key;
}

int findMaxValue(struct TreeNode* root) {
    if (root == NULL) {
        return -1; // Árvore vazia
    }

    while (root->right != NULL) {
        root = root->right;
    }

    return root->key;
}

// Função para liberar a memória alocada para os nós da árvore
void freeTree(struct TreeNode* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    struct TreeNode* root = NULL;

    // Inserção de valores
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // Teste de busca
    int valueToSearch = 40;
    if (search(root, valueToSearch)) {
        printf("Valor %d encontrado na árvore.\n", valueToSearch);
    } else {
        printf("Valor %d não encontrado na árvore.\n", valueToSearch);
    }

    // Teste de remoção
    int valueToRemove = 30;
    root = deleteNode(root, valueToRemove);
    printf("Árvore após remover o valor %d:\n", valueToRemove);
    inorder(root);
    printf("\n");

    // Percursos na árvore
    printf("Inorder traversal: ");
    inorder(root);
    printf("\n");

    printf("Preorder traversal: ");
    preorder(root);
    printf("\n");

    printf("Postorder traversal: ");
    postorder(root);
    printf("\n");

    // Mínimo e Máximo
    printf("Valor mínimo na árvore: %d\n", findMinValue(root));
    printf("Valor máximo na árvore: %d\n", findMaxValue(root));

    // Liberação de memória
    freeTree(root);

    return 0;
}

